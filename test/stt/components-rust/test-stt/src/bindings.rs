// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod stt {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum QuotaUnit {
                Seconds,
                Requests,
                Credits,
            }
            impl ::core::fmt::Debug for QuotaUnit {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        QuotaUnit::Seconds => {
                            f.debug_tuple("QuotaUnit::Seconds").finish()
                        }
                        QuotaUnit::Requests => {
                            f.debug_tuple("QuotaUnit::Requests").finish()
                        }
                        QuotaUnit::Credits => {
                            f.debug_tuple("QuotaUnit::Credits").finish()
                        }
                    }
                }
            }
            impl QuotaUnit {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> QuotaUnit {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => QuotaUnit::Seconds,
                        1 => QuotaUnit::Requests,
                        2 => QuotaUnit::Credits,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct QuotaInfo {
                pub used: u32,
                pub limit: u32,
                pub reset_time: u64,
                pub unit: QuotaUnit,
            }
            impl ::core::fmt::Debug for QuotaInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("QuotaInfo")
                        .field("used", &self.used)
                        .field("limit", &self.limit)
                        .field("reset-time", &self.reset_time)
                        .field("unit", &self.unit)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum SttError {
                InvalidAudio(_rt::String),
                UnsupportedFormat(_rt::String),
                UnsupportedLanguage(_rt::String),
                TranscriptionFailed(_rt::String),
                Unauthorized(_rt::String),
                AccessDenied(_rt::String),
                QuotaExceeded(QuotaInfo),
                RateLimited(u32),
                InsufficientCredits,
                UnsupportedOperation(_rt::String),
                ServiceUnavailable(_rt::String),
                NetworkError(_rt::String),
                InternalError(_rt::String),
            }
            impl ::core::fmt::Debug for SttError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        SttError::InvalidAudio(e) => {
                            f.debug_tuple("SttError::InvalidAudio").field(e).finish()
                        }
                        SttError::UnsupportedFormat(e) => {
                            f.debug_tuple("SttError::UnsupportedFormat")
                                .field(e)
                                .finish()
                        }
                        SttError::UnsupportedLanguage(e) => {
                            f.debug_tuple("SttError::UnsupportedLanguage")
                                .field(e)
                                .finish()
                        }
                        SttError::TranscriptionFailed(e) => {
                            f.debug_tuple("SttError::TranscriptionFailed")
                                .field(e)
                                .finish()
                        }
                        SttError::Unauthorized(e) => {
                            f.debug_tuple("SttError::Unauthorized").field(e).finish()
                        }
                        SttError::AccessDenied(e) => {
                            f.debug_tuple("SttError::AccessDenied").field(e).finish()
                        }
                        SttError::QuotaExceeded(e) => {
                            f.debug_tuple("SttError::QuotaExceeded").field(e).finish()
                        }
                        SttError::RateLimited(e) => {
                            f.debug_tuple("SttError::RateLimited").field(e).finish()
                        }
                        SttError::InsufficientCredits => {
                            f.debug_tuple("SttError::InsufficientCredits").finish()
                        }
                        SttError::UnsupportedOperation(e) => {
                            f.debug_tuple("SttError::UnsupportedOperation")
                                .field(e)
                                .finish()
                        }
                        SttError::ServiceUnavailable(e) => {
                            f.debug_tuple("SttError::ServiceUnavailable")
                                .field(e)
                                .finish()
                        }
                        SttError::NetworkError(e) => {
                            f.debug_tuple("SttError::NetworkError").field(e).finish()
                        }
                        SttError::InternalError(e) => {
                            f.debug_tuple("SttError::InternalError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for SttError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for SttError {}
            pub type LanguageCode = _rt::String;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum AudioFormat {
                Wav,
                Mp3,
                Flac,
                Ogg,
                Aac,
                Pcm,
            }
            impl ::core::fmt::Debug for AudioFormat {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AudioFormat::Wav => f.debug_tuple("AudioFormat::Wav").finish(),
                        AudioFormat::Mp3 => f.debug_tuple("AudioFormat::Mp3").finish(),
                        AudioFormat::Flac => f.debug_tuple("AudioFormat::Flac").finish(),
                        AudioFormat::Ogg => f.debug_tuple("AudioFormat::Ogg").finish(),
                        AudioFormat::Aac => f.debug_tuple("AudioFormat::Aac").finish(),
                        AudioFormat::Pcm => f.debug_tuple("AudioFormat::Pcm").finish(),
                    }
                }
            }
            impl AudioFormat {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> AudioFormat {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => AudioFormat::Wav,
                        1 => AudioFormat::Mp3,
                        2 => AudioFormat::Flac,
                        3 => AudioFormat::Ogg,
                        4 => AudioFormat::Aac,
                        5 => AudioFormat::Pcm,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AudioConfig {
                pub format: AudioFormat,
                pub sample_rate: Option<u32>,
                pub channels: Option<u8>,
            }
            impl ::core::fmt::Debug for AudioConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AudioConfig")
                        .field("format", &self.format)
                        .field("sample-rate", &self.sample_rate)
                        .field("channels", &self.channels)
                        .finish()
                }
            }
            /// Only word-level timing is commonly supported
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum TimingMarkType {
                Word,
            }
            impl ::core::fmt::Debug for TimingMarkType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        TimingMarkType::Word => {
                            f.debug_tuple("TimingMarkType::Word").finish()
                        }
                    }
                }
            }
            impl TimingMarkType {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> TimingMarkType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => TimingMarkType::Word,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct WordSegment {
                pub text: _rt::String,
                pub start_time: f32,
                pub end_time: f32,
                pub confidence: Option<f32>,
                pub speaker_id: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for WordSegment {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WordSegment")
                        .field("text", &self.text)
                        .field("start-time", &self.start_time)
                        .field("end-time", &self.end_time)
                        .field("confidence", &self.confidence)
                        .field("speaker-id", &self.speaker_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TranscriptAlternative {
                pub text: _rt::String,
                pub confidence: f32,
                pub words: _rt::Vec<WordSegment>,
            }
            impl ::core::fmt::Debug for TranscriptAlternative {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TranscriptAlternative")
                        .field("text", &self.text)
                        .field("confidence", &self.confidence)
                        .field("words", &self.words)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TranscriptionMetadata {
                pub duration_seconds: f32,
                pub audio_size_bytes: u32,
                pub request_id: _rt::String,
                pub model: Option<_rt::String>,
                pub language: LanguageCode,
            }
            impl ::core::fmt::Debug for TranscriptionMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TranscriptionMetadata")
                        .field("duration-seconds", &self.duration_seconds)
                        .field("audio-size-bytes", &self.audio_size_bytes)
                        .field("request-id", &self.request_id)
                        .field("model", &self.model)
                        .field("language", &self.language)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TranscriptionResult {
                pub alternatives: _rt::Vec<TranscriptAlternative>,
                pub metadata: TranscriptionMetadata,
            }
            impl ::core::fmt::Debug for TranscriptionResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TranscriptionResult")
                        .field("alternatives", &self.alternatives)
                        .field("metadata", &self.metadata)
                        .finish()
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod languages {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type LanguageCode = super::super::super::golem::stt::types::LanguageCode;
            pub type SttError = super::super::super::golem::stt::types::SttError;
            #[derive(Clone)]
            pub struct LanguageInfo {
                pub code: LanguageCode,
                pub name: _rt::String,
                pub native_name: _rt::String,
            }
            impl ::core::fmt::Debug for LanguageInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LanguageInfo")
                        .field("code", &self.code)
                        .field("name", &self.name)
                        .field("native-name", &self.native_name)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn list_languages() -> Result<_rt::Vec<LanguageInfo>, SttError> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 40]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:stt/languages@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "list-languages"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result52 = match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base14 = l3;
                                let len14 = l4;
                                let mut result14 = _rt::Vec::with_capacity(len14);
                                for i in 0..len14 {
                                    let base = base14
                                        .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                    let e14 = {
                                        let l5 = *base.add(0).cast::<*mut u8>();
                                        let l6 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len7 = l6;
                                        let bytes7 = _rt::Vec::from_raw_parts(
                                            l5.cast(),
                                            len7,
                                            len7,
                                        );
                                        let l8 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l9 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len10 = l9;
                                        let bytes10 = _rt::Vec::from_raw_parts(
                                            l8.cast(),
                                            len10,
                                            len10,
                                        );
                                        let l11 = *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l12 = *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len13 = l12;
                                        let bytes13 = _rt::Vec::from_raw_parts(
                                            l11.cast(),
                                            len13,
                                            len13,
                                        );
                                        LanguageInfo {
                                            code: _rt::string_lift(bytes7),
                                            name: _rt::string_lift(bytes10),
                                            native_name: _rt::string_lift(bytes13),
                                        }
                                    };
                                    result14.push(e14);
                                }
                                _rt::cabi_dealloc(
                                    base14,
                                    len14 * (6 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result14
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l15 = i32::from(*ptr0.add(8).cast::<u8>());
                                use super::super::super::golem::stt::types::SttError as V51;
                                let v51 = match l15 {
                                    0 => {
                                        let e51 = {
                                            let l16 = *ptr0.add(16).cast::<*mut u8>();
                                            let l17 = *ptr0
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len18 = l17;
                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                l16.cast(),
                                                len18,
                                                len18,
                                            );
                                            _rt::string_lift(bytes18)
                                        };
                                        V51::InvalidAudio(e51)
                                    }
                                    1 => {
                                        let e51 = {
                                            let l19 = *ptr0.add(16).cast::<*mut u8>();
                                            let l20 = *ptr0
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len21 = l20;
                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                l19.cast(),
                                                len21,
                                                len21,
                                            );
                                            _rt::string_lift(bytes21)
                                        };
                                        V51::UnsupportedFormat(e51)
                                    }
                                    2 => {
                                        let e51 = {
                                            let l22 = *ptr0.add(16).cast::<*mut u8>();
                                            let l23 = *ptr0
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len24 = l23;
                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                l22.cast(),
                                                len24,
                                                len24,
                                            );
                                            _rt::string_lift(bytes24)
                                        };
                                        V51::UnsupportedLanguage(e51)
                                    }
                                    3 => {
                                        let e51 = {
                                            let l25 = *ptr0.add(16).cast::<*mut u8>();
                                            let l26 = *ptr0
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len27 = l26;
                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                l25.cast(),
                                                len27,
                                                len27,
                                            );
                                            _rt::string_lift(bytes27)
                                        };
                                        V51::TranscriptionFailed(e51)
                                    }
                                    4 => {
                                        let e51 = {
                                            let l28 = *ptr0.add(16).cast::<*mut u8>();
                                            let l29 = *ptr0
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len30 = l29;
                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                l28.cast(),
                                                len30,
                                                len30,
                                            );
                                            _rt::string_lift(bytes30)
                                        };
                                        V51::Unauthorized(e51)
                                    }
                                    5 => {
                                        let e51 = {
                                            let l31 = *ptr0.add(16).cast::<*mut u8>();
                                            let l32 = *ptr0
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len33 = l32;
                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                l31.cast(),
                                                len33,
                                                len33,
                                            );
                                            _rt::string_lift(bytes33)
                                        };
                                        V51::AccessDenied(e51)
                                    }
                                    6 => {
                                        let e51 = {
                                            let l34 = *ptr0.add(16).cast::<i32>();
                                            let l35 = *ptr0.add(20).cast::<i32>();
                                            let l36 = *ptr0.add(24).cast::<i64>();
                                            let l37 = i32::from(*ptr0.add(32).cast::<u8>());
                                            super::super::super::golem::stt::types::QuotaInfo {
                                                used: l34 as u32,
                                                limit: l35 as u32,
                                                reset_time: l36 as u64,
                                                unit: super::super::super::golem::stt::types::QuotaUnit::_lift(
                                                    l37 as u8,
                                                ),
                                            }
                                        };
                                        V51::QuotaExceeded(e51)
                                    }
                                    7 => {
                                        let e51 = {
                                            let l38 = *ptr0.add(16).cast::<i32>();
                                            l38 as u32
                                        };
                                        V51::RateLimited(e51)
                                    }
                                    8 => V51::InsufficientCredits,
                                    9 => {
                                        let e51 = {
                                            let l39 = *ptr0.add(16).cast::<*mut u8>();
                                            let l40 = *ptr0
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len41 = l40;
                                            let bytes41 = _rt::Vec::from_raw_parts(
                                                l39.cast(),
                                                len41,
                                                len41,
                                            );
                                            _rt::string_lift(bytes41)
                                        };
                                        V51::UnsupportedOperation(e51)
                                    }
                                    10 => {
                                        let e51 = {
                                            let l42 = *ptr0.add(16).cast::<*mut u8>();
                                            let l43 = *ptr0
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len44 = l43;
                                            let bytes44 = _rt::Vec::from_raw_parts(
                                                l42.cast(),
                                                len44,
                                                len44,
                                            );
                                            _rt::string_lift(bytes44)
                                        };
                                        V51::ServiceUnavailable(e51)
                                    }
                                    11 => {
                                        let e51 = {
                                            let l45 = *ptr0.add(16).cast::<*mut u8>();
                                            let l46 = *ptr0
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len47 = l46;
                                            let bytes47 = _rt::Vec::from_raw_parts(
                                                l45.cast(),
                                                len47,
                                                len47,
                                            );
                                            _rt::string_lift(bytes47)
                                        };
                                        V51::NetworkError(e51)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e51 = {
                                            let l48 = *ptr0.add(16).cast::<*mut u8>();
                                            let l49 = *ptr0
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len50 = l49;
                                            let bytes50 = _rt::Vec::from_raw_parts(
                                                l48.cast(),
                                                len50,
                                                len50,
                                            );
                                            _rt::string_lift(bytes50)
                                        };
                                        V51::InternalError(e51)
                                    }
                                };
                                v51
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result52
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod vocabularies {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type SttError = super::super::super::golem::stt::types::SttError;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Vocabulary {
                handle: _rt::Resource<Vocabulary>,
            }
            impl Vocabulary {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Vocabulary {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:stt/vocabularies@1.0.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]vocabulary"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Vocabulary {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_name(&self) -> _rt::String {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:stt/vocabularies@1.0.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]vocabulary.get-name"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl Vocabulary {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_phrases(&self) -> _rt::Vec<_rt::String> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:stt/vocabularies@1.0.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]vocabulary.get-phrases"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base7 = l2;
                        let len7 = l3;
                        let mut result7 = _rt::Vec::with_capacity(len7);
                        for i in 0..len7 {
                            let base = base7
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            let e7 = {
                                let l4 = *base.add(0).cast::<*mut u8>();
                                let l5 = *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            result7.push(e7);
                        }
                        _rt::cabi_dealloc(
                            base7,
                            len7 * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result8 = result7;
                        result8
                    }
                }
            }
            impl Vocabulary {
                #[allow(unused_unsafe, clippy::all)]
                pub fn delete(&self) -> Result<(), SttError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 40],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:stt/vocabularies@1.0.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]vocabulary.delete"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result40 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::stt::types::SttError as V39;
                                    let v39 = match l3 {
                                        0 => {
                                            let e39 = {
                                                let l4 = *ptr0.add(16).cast::<*mut u8>();
                                                let l5 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                _rt::string_lift(bytes6)
                                            };
                                            V39::InvalidAudio(e39)
                                        }
                                        1 => {
                                            let e39 = {
                                                let l7 = *ptr0.add(16).cast::<*mut u8>();
                                                let l8 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                _rt::string_lift(bytes9)
                                            };
                                            V39::UnsupportedFormat(e39)
                                        }
                                        2 => {
                                            let e39 = {
                                                let l10 = *ptr0.add(16).cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            V39::UnsupportedLanguage(e39)
                                        }
                                        3 => {
                                            let e39 = {
                                                let l13 = *ptr0.add(16).cast::<*mut u8>();
                                                let l14 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            V39::TranscriptionFailed(e39)
                                        }
                                        4 => {
                                            let e39 = {
                                                let l16 = *ptr0.add(16).cast::<*mut u8>();
                                                let l17 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            V39::Unauthorized(e39)
                                        }
                                        5 => {
                                            let e39 = {
                                                let l19 = *ptr0.add(16).cast::<*mut u8>();
                                                let l20 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                _rt::string_lift(bytes21)
                                            };
                                            V39::AccessDenied(e39)
                                        }
                                        6 => {
                                            let e39 = {
                                                let l22 = *ptr0.add(16).cast::<i32>();
                                                let l23 = *ptr0.add(20).cast::<i32>();
                                                let l24 = *ptr0.add(24).cast::<i64>();
                                                let l25 = i32::from(*ptr0.add(32).cast::<u8>());
                                                super::super::super::golem::stt::types::QuotaInfo {
                                                    used: l22 as u32,
                                                    limit: l23 as u32,
                                                    reset_time: l24 as u64,
                                                    unit: super::super::super::golem::stt::types::QuotaUnit::_lift(
                                                        l25 as u8,
                                                    ),
                                                }
                                            };
                                            V39::QuotaExceeded(e39)
                                        }
                                        7 => {
                                            let e39 = {
                                                let l26 = *ptr0.add(16).cast::<i32>();
                                                l26 as u32
                                            };
                                            V39::RateLimited(e39)
                                        }
                                        8 => V39::InsufficientCredits,
                                        9 => {
                                            let e39 = {
                                                let l27 = *ptr0.add(16).cast::<*mut u8>();
                                                let l28 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                _rt::string_lift(bytes29)
                                            };
                                            V39::UnsupportedOperation(e39)
                                        }
                                        10 => {
                                            let e39 = {
                                                let l30 = *ptr0.add(16).cast::<*mut u8>();
                                                let l31 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len32 = l31;
                                                let bytes32 = _rt::Vec::from_raw_parts(
                                                    l30.cast(),
                                                    len32,
                                                    len32,
                                                );
                                                _rt::string_lift(bytes32)
                                            };
                                            V39::ServiceUnavailable(e39)
                                        }
                                        11 => {
                                            let e39 = {
                                                let l33 = *ptr0.add(16).cast::<*mut u8>();
                                                let l34 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V39::NetworkError(e39)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e39 = {
                                                let l36 = *ptr0.add(16).cast::<*mut u8>();
                                                let l37 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            V39::InternalError(e39)
                                        }
                                    };
                                    v39
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result40
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn create_vocabulary(
                name: &str,
                phrases: &[_rt::String],
            ) -> Result<Vocabulary, SttError> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 40]);
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec2 = phrases;
                    let len2 = vec2.len();
                    let layout2 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec2.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result2 = if layout2.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout2);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec2.into_iter().enumerate() {
                        let base = result2
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len1;
                            *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                        }
                    }
                    let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:stt/vocabularies@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "create-vocabulary"]
                        fn wit_import4(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import4(ptr0.cast_mut(), len0, result2, len2, ptr3) };
                    let l5 = i32::from(*ptr3.add(0).cast::<u8>());
                    let result44 = match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr3.add(8).cast::<i32>();
                                unsafe { Vocabulary::from_handle(l6 as u32) }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l7 = i32::from(*ptr3.add(8).cast::<u8>());
                                use super::super::super::golem::stt::types::SttError as V43;
                                let v43 = match l7 {
                                    0 => {
                                        let e43 = {
                                            let l8 = *ptr3.add(16).cast::<*mut u8>();
                                            let l9 = *ptr3
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                l8.cast(),
                                                len10,
                                                len10,
                                            );
                                            _rt::string_lift(bytes10)
                                        };
                                        V43::InvalidAudio(e43)
                                    }
                                    1 => {
                                        let e43 = {
                                            let l11 = *ptr3.add(16).cast::<*mut u8>();
                                            let l12 = *ptr3
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len13 = l12;
                                            let bytes13 = _rt::Vec::from_raw_parts(
                                                l11.cast(),
                                                len13,
                                                len13,
                                            );
                                            _rt::string_lift(bytes13)
                                        };
                                        V43::UnsupportedFormat(e43)
                                    }
                                    2 => {
                                        let e43 = {
                                            let l14 = *ptr3.add(16).cast::<*mut u8>();
                                            let l15 = *ptr3
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len16 = l15;
                                            let bytes16 = _rt::Vec::from_raw_parts(
                                                l14.cast(),
                                                len16,
                                                len16,
                                            );
                                            _rt::string_lift(bytes16)
                                        };
                                        V43::UnsupportedLanguage(e43)
                                    }
                                    3 => {
                                        let e43 = {
                                            let l17 = *ptr3.add(16).cast::<*mut u8>();
                                            let l18 = *ptr3
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len19 = l18;
                                            let bytes19 = _rt::Vec::from_raw_parts(
                                                l17.cast(),
                                                len19,
                                                len19,
                                            );
                                            _rt::string_lift(bytes19)
                                        };
                                        V43::TranscriptionFailed(e43)
                                    }
                                    4 => {
                                        let e43 = {
                                            let l20 = *ptr3.add(16).cast::<*mut u8>();
                                            let l21 = *ptr3
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len22 = l21;
                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                l20.cast(),
                                                len22,
                                                len22,
                                            );
                                            _rt::string_lift(bytes22)
                                        };
                                        V43::Unauthorized(e43)
                                    }
                                    5 => {
                                        let e43 = {
                                            let l23 = *ptr3.add(16).cast::<*mut u8>();
                                            let l24 = *ptr3
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len25 = l24;
                                            let bytes25 = _rt::Vec::from_raw_parts(
                                                l23.cast(),
                                                len25,
                                                len25,
                                            );
                                            _rt::string_lift(bytes25)
                                        };
                                        V43::AccessDenied(e43)
                                    }
                                    6 => {
                                        let e43 = {
                                            let l26 = *ptr3.add(16).cast::<i32>();
                                            let l27 = *ptr3.add(20).cast::<i32>();
                                            let l28 = *ptr3.add(24).cast::<i64>();
                                            let l29 = i32::from(*ptr3.add(32).cast::<u8>());
                                            super::super::super::golem::stt::types::QuotaInfo {
                                                used: l26 as u32,
                                                limit: l27 as u32,
                                                reset_time: l28 as u64,
                                                unit: super::super::super::golem::stt::types::QuotaUnit::_lift(
                                                    l29 as u8,
                                                ),
                                            }
                                        };
                                        V43::QuotaExceeded(e43)
                                    }
                                    7 => {
                                        let e43 = {
                                            let l30 = *ptr3.add(16).cast::<i32>();
                                            l30 as u32
                                        };
                                        V43::RateLimited(e43)
                                    }
                                    8 => V43::InsufficientCredits,
                                    9 => {
                                        let e43 = {
                                            let l31 = *ptr3.add(16).cast::<*mut u8>();
                                            let l32 = *ptr3
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len33 = l32;
                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                l31.cast(),
                                                len33,
                                                len33,
                                            );
                                            _rt::string_lift(bytes33)
                                        };
                                        V43::UnsupportedOperation(e43)
                                    }
                                    10 => {
                                        let e43 = {
                                            let l34 = *ptr3.add(16).cast::<*mut u8>();
                                            let l35 = *ptr3
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len36 = l35;
                                            let bytes36 = _rt::Vec::from_raw_parts(
                                                l34.cast(),
                                                len36,
                                                len36,
                                            );
                                            _rt::string_lift(bytes36)
                                        };
                                        V43::ServiceUnavailable(e43)
                                    }
                                    11 => {
                                        let e43 = {
                                            let l37 = *ptr3.add(16).cast::<*mut u8>();
                                            let l38 = *ptr3
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len39 = l38;
                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                l37.cast(),
                                                len39,
                                                len39,
                                            );
                                            _rt::string_lift(bytes39)
                                        };
                                        V43::NetworkError(e43)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e43 = {
                                            let l40 = *ptr3.add(16).cast::<*mut u8>();
                                            let l41 = *ptr3
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len42 = l41;
                                            let bytes42 = _rt::Vec::from_raw_parts(
                                                l40.cast(),
                                                len42,
                                                len42,
                                            );
                                            _rt::string_lift(bytes42)
                                        };
                                        V43::InternalError(e43)
                                    }
                                };
                                v43
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout2.size() != 0 {
                        _rt::alloc::dealloc(result2.cast(), layout2);
                    }
                    result44
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod transcription {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type AudioConfig = super::super::super::golem::stt::types::AudioConfig;
            pub type TranscriptionResult = super::super::super::golem::stt::types::TranscriptionResult;
            pub type SttError = super::super::super::golem::stt::types::SttError;
            pub type LanguageCode = super::super::super::golem::stt::types::LanguageCode;
            pub type TranscriptAlternative = super::super::super::golem::stt::types::TranscriptAlternative;
            #[derive(Clone)]
            pub struct TranscribeOptions {
                pub enable_timestamps: Option<bool>,
                pub enable_speaker_diarization: Option<bool>,
                pub language: Option<LanguageCode>,
                pub model: Option<_rt::String>,
                pub profanity_filter: Option<bool>,
                pub vocabulary_name: Option<_rt::String>,
                pub speech_context: Option<_rt::Vec<_rt::String>>,
                pub enable_word_confidence: Option<bool>,
                pub enable_timing_detail: Option<bool>,
            }
            impl ::core::fmt::Debug for TranscribeOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TranscribeOptions")
                        .field("enable-timestamps", &self.enable_timestamps)
                        .field(
                            "enable-speaker-diarization",
                            &self.enable_speaker_diarization,
                        )
                        .field("language", &self.language)
                        .field("model", &self.model)
                        .field("profanity-filter", &self.profanity_filter)
                        .field("vocabulary-name", &self.vocabulary_name)
                        .field("speech-context", &self.speech_context)
                        .field("enable-word-confidence", &self.enable_word_confidence)
                        .field("enable-timing-detail", &self.enable_timing_detail)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct TranscriptionStream {
                handle: _rt::Resource<TranscriptionStream>,
            }
            impl TranscriptionStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for TranscriptionStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:stt/transcription@1.0.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]transcription-stream"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn transcribe(
                audio: &[u8],
                config: AudioConfig,
                options: Option<&TranscribeOptions>,
            ) -> Result<TranscriptionResult, SttError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 16 + 18 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 16
                            + 18 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let vec1 = audio;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len1;
                    *ptr0.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                    let super::super::super::golem::stt::types::AudioConfig {
                        format: format2,
                        sample_rate: sample_rate2,
                        channels: channels2,
                    } = config;
                    *ptr0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>() = (format2
                        .clone() as i32) as u8;
                    match sample_rate2 {
                        Some(e) => {
                            *ptr0
                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr0
                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match channels2 {
                        Some(e) => {
                            *ptr0
                                .add(12 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            *ptr0
                                .add(13 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (_rt::as_i32(e)) as u8;
                        }
                        None => {
                            *ptr0
                                .add(12 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match options {
                        Some(e) => {
                            *ptr0
                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let TranscribeOptions {
                                enable_timestamps: enable_timestamps3,
                                enable_speaker_diarization: enable_speaker_diarization3,
                                language: language3,
                                model: model3,
                                profanity_filter: profanity_filter3,
                                vocabulary_name: vocabulary_name3,
                                speech_context: speech_context3,
                                enable_word_confidence: enable_word_confidence3,
                                enable_timing_detail: enable_timing_detail3,
                            } = e;
                            match enable_timestamps3 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(17 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match enable_speaker_diarization3 {
                                Some(e) => {
                                    *ptr0
                                        .add(18 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(19 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(18 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match language3 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec4 = e;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *ptr0
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr0
                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match model3 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *ptr0
                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr0
                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match profanity_filter3 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(17 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match vocabulary_name3 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *ptr0
                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr0
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match speech_context3 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec8 = e;
                                    let len8 = vec8.len();
                                    let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec8.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result8 = if layout8.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout8);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec8.into_iter().enumerate() {
                                        let base = result8
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec7 = e;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                    }
                                    *ptr0
                                        .add(16 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr0
                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result8;
                                    cleanup_list.extend_from_slice(&[(result8, layout8)]);
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match enable_word_confidence3 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(17 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match enable_timing_detail3 {
                                Some(e) => {
                                    *ptr0
                                        .add(18 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(19 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(18 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0
                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr9 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:stt/transcription@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "transcribe"]
                        fn wit_import10(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import10(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import10(ptr0, ptr9) };
                    let l11 = i32::from(*ptr9.add(0).cast::<u8>());
                    let result82 = match l11 {
                        0 => {
                            let e = {
                                let l12 = *ptr9.add(8).cast::<*mut u8>();
                                let l13 = *ptr9
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base32 = l12;
                                let len32 = l13;
                                let mut result32 = _rt::Vec::with_capacity(len32);
                                for i in 0..len32 {
                                    let base = base32
                                        .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                    let e32 = {
                                        let l14 = *base.add(0).cast::<*mut u8>();
                                        let l15 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len16 = l15;
                                        let bytes16 = _rt::Vec::from_raw_parts(
                                            l14.cast(),
                                            len16,
                                            len16,
                                        );
                                        let l17 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<f32>();
                                        let l18 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l19 = *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base31 = l18;
                                        let len31 = l19;
                                        let mut result31 = _rt::Vec::with_capacity(len31);
                                        for i in 0..len31 {
                                            let base = base31
                                                .add(i * (16 + 5 * ::core::mem::size_of::<*const u8>()));
                                            let e31 = {
                                                let l20 = *base.add(0).cast::<*mut u8>();
                                                let l21 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                let l23 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<f32>();
                                                let l24 = *base
                                                    .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<f32>();
                                                let l25 = i32::from(
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l27 = i32::from(
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                super::super::super::golem::stt::types::WordSegment {
                                                    text: _rt::string_lift(bytes22),
                                                    start_time: l23,
                                                    end_time: l24,
                                                    confidence: match l25 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l26 = *base
                                                                    .add(12 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f32>();
                                                                l26
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    speaker_id: match l27 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l28 = *base
                                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l29 = *base
                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len30 = l29;
                                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                                    l28.cast(),
                                                                    len30,
                                                                    len30,
                                                                );
                                                                _rt::string_lift(bytes30)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            result31.push(e31);
                                        }
                                        _rt::cabi_dealloc(
                                            base31,
                                            len31 * (16 + 5 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::golem::stt::types::TranscriptAlternative {
                                            text: _rt::string_lift(bytes16),
                                            confidence: l17,
                                            words: result31,
                                        }
                                    };
                                    result32.push(e32);
                                }
                                _rt::cabi_dealloc(
                                    base32,
                                    len32 * (5 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l33 = *ptr9
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<f32>();
                                let l34 = *ptr9
                                    .add(12 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                let l35 = *ptr9
                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l36 = *ptr9
                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len37 = l36;
                                let bytes37 = _rt::Vec::from_raw_parts(
                                    l35.cast(),
                                    len37,
                                    len37,
                                );
                                let l38 = i32::from(
                                    *ptr9
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l42 = *ptr9
                                    .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l43 = *ptr9
                                    .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len44 = l43;
                                let bytes44 = _rt::Vec::from_raw_parts(
                                    l42.cast(),
                                    len44,
                                    len44,
                                );
                                super::super::super::golem::stt::types::TranscriptionResult {
                                    alternatives: result32,
                                    metadata: super::super::super::golem::stt::types::TranscriptionMetadata {
                                        duration_seconds: l33,
                                        audio_size_bytes: l34 as u32,
                                        request_id: _rt::string_lift(bytes37),
                                        model: match l38 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l39 = *ptr9
                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l40 = *ptr9
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len41 = l40;
                                                    let bytes41 = _rt::Vec::from_raw_parts(
                                                        l39.cast(),
                                                        len41,
                                                        len41,
                                                    );
                                                    _rt::string_lift(bytes41)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        language: _rt::string_lift(bytes44),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l45 = i32::from(*ptr9.add(8).cast::<u8>());
                                use super::super::super::golem::stt::types::SttError as V81;
                                let v81 = match l45 {
                                    0 => {
                                        let e81 = {
                                            let l46 = *ptr9.add(16).cast::<*mut u8>();
                                            let l47 = *ptr9
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len48 = l47;
                                            let bytes48 = _rt::Vec::from_raw_parts(
                                                l46.cast(),
                                                len48,
                                                len48,
                                            );
                                            _rt::string_lift(bytes48)
                                        };
                                        V81::InvalidAudio(e81)
                                    }
                                    1 => {
                                        let e81 = {
                                            let l49 = *ptr9.add(16).cast::<*mut u8>();
                                            let l50 = *ptr9
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len51 = l50;
                                            let bytes51 = _rt::Vec::from_raw_parts(
                                                l49.cast(),
                                                len51,
                                                len51,
                                            );
                                            _rt::string_lift(bytes51)
                                        };
                                        V81::UnsupportedFormat(e81)
                                    }
                                    2 => {
                                        let e81 = {
                                            let l52 = *ptr9.add(16).cast::<*mut u8>();
                                            let l53 = *ptr9
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len54 = l53;
                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                l52.cast(),
                                                len54,
                                                len54,
                                            );
                                            _rt::string_lift(bytes54)
                                        };
                                        V81::UnsupportedLanguage(e81)
                                    }
                                    3 => {
                                        let e81 = {
                                            let l55 = *ptr9.add(16).cast::<*mut u8>();
                                            let l56 = *ptr9
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len57 = l56;
                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                l55.cast(),
                                                len57,
                                                len57,
                                            );
                                            _rt::string_lift(bytes57)
                                        };
                                        V81::TranscriptionFailed(e81)
                                    }
                                    4 => {
                                        let e81 = {
                                            let l58 = *ptr9.add(16).cast::<*mut u8>();
                                            let l59 = *ptr9
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len60 = l59;
                                            let bytes60 = _rt::Vec::from_raw_parts(
                                                l58.cast(),
                                                len60,
                                                len60,
                                            );
                                            _rt::string_lift(bytes60)
                                        };
                                        V81::Unauthorized(e81)
                                    }
                                    5 => {
                                        let e81 = {
                                            let l61 = *ptr9.add(16).cast::<*mut u8>();
                                            let l62 = *ptr9
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len63 = l62;
                                            let bytes63 = _rt::Vec::from_raw_parts(
                                                l61.cast(),
                                                len63,
                                                len63,
                                            );
                                            _rt::string_lift(bytes63)
                                        };
                                        V81::AccessDenied(e81)
                                    }
                                    6 => {
                                        let e81 = {
                                            let l64 = *ptr9.add(16).cast::<i32>();
                                            let l65 = *ptr9.add(20).cast::<i32>();
                                            let l66 = *ptr9.add(24).cast::<i64>();
                                            let l67 = i32::from(*ptr9.add(32).cast::<u8>());
                                            super::super::super::golem::stt::types::QuotaInfo {
                                                used: l64 as u32,
                                                limit: l65 as u32,
                                                reset_time: l66 as u64,
                                                unit: super::super::super::golem::stt::types::QuotaUnit::_lift(
                                                    l67 as u8,
                                                ),
                                            }
                                        };
                                        V81::QuotaExceeded(e81)
                                    }
                                    7 => {
                                        let e81 = {
                                            let l68 = *ptr9.add(16).cast::<i32>();
                                            l68 as u32
                                        };
                                        V81::RateLimited(e81)
                                    }
                                    8 => V81::InsufficientCredits,
                                    9 => {
                                        let e81 = {
                                            let l69 = *ptr9.add(16).cast::<*mut u8>();
                                            let l70 = *ptr9
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len71 = l70;
                                            let bytes71 = _rt::Vec::from_raw_parts(
                                                l69.cast(),
                                                len71,
                                                len71,
                                            );
                                            _rt::string_lift(bytes71)
                                        };
                                        V81::UnsupportedOperation(e81)
                                    }
                                    10 => {
                                        let e81 = {
                                            let l72 = *ptr9.add(16).cast::<*mut u8>();
                                            let l73 = *ptr9
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len74 = l73;
                                            let bytes74 = _rt::Vec::from_raw_parts(
                                                l72.cast(),
                                                len74,
                                                len74,
                                            );
                                            _rt::string_lift(bytes74)
                                        };
                                        V81::ServiceUnavailable(e81)
                                    }
                                    11 => {
                                        let e81 = {
                                            let l75 = *ptr9.add(16).cast::<*mut u8>();
                                            let l76 = *ptr9
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len77 = l76;
                                            let bytes77 = _rt::Vec::from_raw_parts(
                                                l75.cast(),
                                                len77,
                                                len77,
                                            );
                                            _rt::string_lift(bytes77)
                                        };
                                        V81::NetworkError(e81)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e81 = {
                                            let l78 = *ptr9.add(16).cast::<*mut u8>();
                                            let l79 = *ptr9
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len80 = l79;
                                            let bytes80 = _rt::Vec::from_raw_parts(
                                                l78.cast(),
                                                len80,
                                                len80,
                                            );
                                            _rt::string_lift(bytes80)
                                        };
                                        V81::InternalError(e81)
                                    }
                                };
                                v81
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result82
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn transcribe_stream(
                config: AudioConfig,
                options: Option<&TranscribeOptions>,
            ) -> Result<TranscriptionStream, SttError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 16 + 16 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 16
                            + 16 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::golem::stt::types::AudioConfig {
                        format: format1,
                        sample_rate: sample_rate1,
                        channels: channels1,
                    } = config;
                    *ptr0.add(0).cast::<u8>() = (format1.clone() as i32) as u8;
                    match sample_rate1 {
                        Some(e) => {
                            *ptr0.add(4).cast::<u8>() = (1i32) as u8;
                            *ptr0.add(8).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr0.add(4).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match channels1 {
                        Some(e) => {
                            *ptr0.add(12).cast::<u8>() = (1i32) as u8;
                            *ptr0.add(13).cast::<u8>() = (_rt::as_i32(e)) as u8;
                        }
                        None => {
                            *ptr0.add(12).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match options {
                        Some(e) => {
                            *ptr0.add(16).cast::<u8>() = (1i32) as u8;
                            let TranscribeOptions {
                                enable_timestamps: enable_timestamps2,
                                enable_speaker_diarization: enable_speaker_diarization2,
                                language: language2,
                                model: model2,
                                profanity_filter: profanity_filter2,
                                vocabulary_name: vocabulary_name2,
                                speech_context: speech_context2,
                                enable_word_confidence: enable_word_confidence2,
                                enable_timing_detail: enable_timing_detail2,
                            } = e;
                            match enable_timestamps2 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(17 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match enable_speaker_diarization2 {
                                Some(e) => {
                                    *ptr0
                                        .add(18 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(19 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(18 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match language2 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec3 = e;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    *ptr0
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr0
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match model2 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec4 = e;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *ptr0
                                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr0
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match profanity_filter2 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(17 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match vocabulary_name2 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *ptr0
                                        .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr0
                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match speech_context2 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec7 = e;
                                    let len7 = vec7.len();
                                    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec7.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result7 = if layout7.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout7);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec7.into_iter().enumerate() {
                                        let base = result7
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec6 = e;
                                            let ptr6 = vec6.as_ptr().cast::<u8>();
                                            let len6 = vec6.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len6;
                                            *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                        }
                                    }
                                    *ptr0
                                        .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr0
                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result7;
                                    cleanup_list.extend_from_slice(&[(result7, layout7)]);
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match enable_word_confidence2 {
                                Some(e) => {
                                    *ptr0
                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(17 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(16 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match enable_timing_detail2 {
                                Some(e) => {
                                    *ptr0
                                        .add(18 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr0
                                        .add(19 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                None => {
                                    *ptr0
                                        .add(18 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0.add(16).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:stt/transcription@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "transcribe-stream"]
                        fn wit_import9(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import9(ptr0, ptr8) };
                    let l10 = i32::from(*ptr8.add(0).cast::<u8>());
                    let result49 = match l10 {
                        0 => {
                            let e = {
                                let l11 = *ptr8.add(8).cast::<i32>();
                                unsafe { TranscriptionStream::from_handle(l11 as u32) }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l12 = i32::from(*ptr8.add(8).cast::<u8>());
                                use super::super::super::golem::stt::types::SttError as V48;
                                let v48 = match l12 {
                                    0 => {
                                        let e48 = {
                                            let l13 = *ptr8.add(16).cast::<*mut u8>();
                                            let l14 = *ptr8
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len15 = l14;
                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                l13.cast(),
                                                len15,
                                                len15,
                                            );
                                            _rt::string_lift(bytes15)
                                        };
                                        V48::InvalidAudio(e48)
                                    }
                                    1 => {
                                        let e48 = {
                                            let l16 = *ptr8.add(16).cast::<*mut u8>();
                                            let l17 = *ptr8
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len18 = l17;
                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                l16.cast(),
                                                len18,
                                                len18,
                                            );
                                            _rt::string_lift(bytes18)
                                        };
                                        V48::UnsupportedFormat(e48)
                                    }
                                    2 => {
                                        let e48 = {
                                            let l19 = *ptr8.add(16).cast::<*mut u8>();
                                            let l20 = *ptr8
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len21 = l20;
                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                l19.cast(),
                                                len21,
                                                len21,
                                            );
                                            _rt::string_lift(bytes21)
                                        };
                                        V48::UnsupportedLanguage(e48)
                                    }
                                    3 => {
                                        let e48 = {
                                            let l22 = *ptr8.add(16).cast::<*mut u8>();
                                            let l23 = *ptr8
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len24 = l23;
                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                l22.cast(),
                                                len24,
                                                len24,
                                            );
                                            _rt::string_lift(bytes24)
                                        };
                                        V48::TranscriptionFailed(e48)
                                    }
                                    4 => {
                                        let e48 = {
                                            let l25 = *ptr8.add(16).cast::<*mut u8>();
                                            let l26 = *ptr8
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len27 = l26;
                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                l25.cast(),
                                                len27,
                                                len27,
                                            );
                                            _rt::string_lift(bytes27)
                                        };
                                        V48::Unauthorized(e48)
                                    }
                                    5 => {
                                        let e48 = {
                                            let l28 = *ptr8.add(16).cast::<*mut u8>();
                                            let l29 = *ptr8
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len30 = l29;
                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                l28.cast(),
                                                len30,
                                                len30,
                                            );
                                            _rt::string_lift(bytes30)
                                        };
                                        V48::AccessDenied(e48)
                                    }
                                    6 => {
                                        let e48 = {
                                            let l31 = *ptr8.add(16).cast::<i32>();
                                            let l32 = *ptr8.add(20).cast::<i32>();
                                            let l33 = *ptr8.add(24).cast::<i64>();
                                            let l34 = i32::from(*ptr8.add(32).cast::<u8>());
                                            super::super::super::golem::stt::types::QuotaInfo {
                                                used: l31 as u32,
                                                limit: l32 as u32,
                                                reset_time: l33 as u64,
                                                unit: super::super::super::golem::stt::types::QuotaUnit::_lift(
                                                    l34 as u8,
                                                ),
                                            }
                                        };
                                        V48::QuotaExceeded(e48)
                                    }
                                    7 => {
                                        let e48 = {
                                            let l35 = *ptr8.add(16).cast::<i32>();
                                            l35 as u32
                                        };
                                        V48::RateLimited(e48)
                                    }
                                    8 => V48::InsufficientCredits,
                                    9 => {
                                        let e48 = {
                                            let l36 = *ptr8.add(16).cast::<*mut u8>();
                                            let l37 = *ptr8
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len38 = l37;
                                            let bytes38 = _rt::Vec::from_raw_parts(
                                                l36.cast(),
                                                len38,
                                                len38,
                                            );
                                            _rt::string_lift(bytes38)
                                        };
                                        V48::UnsupportedOperation(e48)
                                    }
                                    10 => {
                                        let e48 = {
                                            let l39 = *ptr8.add(16).cast::<*mut u8>();
                                            let l40 = *ptr8
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len41 = l40;
                                            let bytes41 = _rt::Vec::from_raw_parts(
                                                l39.cast(),
                                                len41,
                                                len41,
                                            );
                                            _rt::string_lift(bytes41)
                                        };
                                        V48::ServiceUnavailable(e48)
                                    }
                                    11 => {
                                        let e48 = {
                                            let l42 = *ptr8.add(16).cast::<*mut u8>();
                                            let l43 = *ptr8
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len44 = l43;
                                            let bytes44 = _rt::Vec::from_raw_parts(
                                                l42.cast(),
                                                len44,
                                                len44,
                                            );
                                            _rt::string_lift(bytes44)
                                        };
                                        V48::NetworkError(e48)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 12, "invalid enum discriminant");
                                        let e48 = {
                                            let l45 = *ptr8.add(16).cast::<*mut u8>();
                                            let l46 = *ptr8
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len47 = l46;
                                            let bytes47 = _rt::Vec::from_raw_parts(
                                                l45.cast(),
                                                len47,
                                                len47,
                                            );
                                            _rt::string_lift(bytes47)
                                        };
                                        V48::InternalError(e48)
                                    }
                                };
                                v48
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result49
                }
            }
            impl TranscriptionStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn send_audio(&self, chunk: &[u8]) -> Result<(), SttError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 40],
                        );
                        let vec0 = chunk;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:stt/transcription@1.0.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]transcription-stream.send-audio"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result41 = match l3 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(8).cast::<u8>());
                                    use super::super::super::golem::stt::types::SttError as V40;
                                    let v40 = match l4 {
                                        0 => {
                                            let e40 = {
                                                let l5 = *ptr1.add(16).cast::<*mut u8>();
                                                let l6 = *ptr1
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    l5.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                _rt::string_lift(bytes7)
                                            };
                                            V40::InvalidAudio(e40)
                                        }
                                        1 => {
                                            let e40 = {
                                                let l8 = *ptr1.add(16).cast::<*mut u8>();
                                                let l9 = *ptr1
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );
                                                _rt::string_lift(bytes10)
                                            };
                                            V40::UnsupportedFormat(e40)
                                        }
                                        2 => {
                                            let e40 = {
                                                let l11 = *ptr1.add(16).cast::<*mut u8>();
                                                let l12 = *ptr1
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );
                                                _rt::string_lift(bytes13)
                                            };
                                            V40::UnsupportedLanguage(e40)
                                        }
                                        3 => {
                                            let e40 = {
                                                let l14 = *ptr1.add(16).cast::<*mut u8>();
                                                let l15 = *ptr1
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );
                                                _rt::string_lift(bytes16)
                                            };
                                            V40::TranscriptionFailed(e40)
                                        }
                                        4 => {
                                            let e40 = {
                                                let l17 = *ptr1.add(16).cast::<*mut u8>();
                                                let l18 = *ptr1
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            V40::Unauthorized(e40)
                                        }
                                        5 => {
                                            let e40 = {
                                                let l20 = *ptr1.add(16).cast::<*mut u8>();
                                                let l21 = *ptr1
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                _rt::string_lift(bytes22)
                                            };
                                            V40::AccessDenied(e40)
                                        }
                                        6 => {
                                            let e40 = {
                                                let l23 = *ptr1.add(16).cast::<i32>();
                                                let l24 = *ptr1.add(20).cast::<i32>();
                                                let l25 = *ptr1.add(24).cast::<i64>();
                                                let l26 = i32::from(*ptr1.add(32).cast::<u8>());
                                                super::super::super::golem::stt::types::QuotaInfo {
                                                    used: l23 as u32,
                                                    limit: l24 as u32,
                                                    reset_time: l25 as u64,
                                                    unit: super::super::super::golem::stt::types::QuotaUnit::_lift(
                                                        l26 as u8,
                                                    ),
                                                }
                                            };
                                            V40::QuotaExceeded(e40)
                                        }
                                        7 => {
                                            let e40 = {
                                                let l27 = *ptr1.add(16).cast::<i32>();
                                                l27 as u32
                                            };
                                            V40::RateLimited(e40)
                                        }
                                        8 => V40::InsufficientCredits,
                                        9 => {
                                            let e40 = {
                                                let l28 = *ptr1.add(16).cast::<*mut u8>();
                                                let l29 = *ptr1
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );
                                                _rt::string_lift(bytes30)
                                            };
                                            V40::UnsupportedOperation(e40)
                                        }
                                        10 => {
                                            let e40 = {
                                                let l31 = *ptr1.add(16).cast::<*mut u8>();
                                                let l32 = *ptr1
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                _rt::string_lift(bytes33)
                                            };
                                            V40::ServiceUnavailable(e40)
                                        }
                                        11 => {
                                            let e40 = {
                                                let l34 = *ptr1.add(16).cast::<*mut u8>();
                                                let l35 = *ptr1
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            V40::NetworkError(e40)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e40 = {
                                                let l37 = *ptr1.add(16).cast::<*mut u8>();
                                                let l38 = *ptr1
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            V40::InternalError(e40)
                                        }
                                    };
                                    v40
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result41
                    }
                }
            }
            impl TranscriptionStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn finish(&self) -> Result<(), SttError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 40],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:stt/transcription@1.0.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]transcription-stream.finish"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result40 = match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::stt::types::SttError as V39;
                                    let v39 = match l3 {
                                        0 => {
                                            let e39 = {
                                                let l4 = *ptr0.add(16).cast::<*mut u8>();
                                                let l5 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                _rt::string_lift(bytes6)
                                            };
                                            V39::InvalidAudio(e39)
                                        }
                                        1 => {
                                            let e39 = {
                                                let l7 = *ptr0.add(16).cast::<*mut u8>();
                                                let l8 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                _rt::string_lift(bytes9)
                                            };
                                            V39::UnsupportedFormat(e39)
                                        }
                                        2 => {
                                            let e39 = {
                                                let l10 = *ptr0.add(16).cast::<*mut u8>();
                                                let l11 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            V39::UnsupportedLanguage(e39)
                                        }
                                        3 => {
                                            let e39 = {
                                                let l13 = *ptr0.add(16).cast::<*mut u8>();
                                                let l14 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            V39::TranscriptionFailed(e39)
                                        }
                                        4 => {
                                            let e39 = {
                                                let l16 = *ptr0.add(16).cast::<*mut u8>();
                                                let l17 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            V39::Unauthorized(e39)
                                        }
                                        5 => {
                                            let e39 = {
                                                let l19 = *ptr0.add(16).cast::<*mut u8>();
                                                let l20 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                _rt::string_lift(bytes21)
                                            };
                                            V39::AccessDenied(e39)
                                        }
                                        6 => {
                                            let e39 = {
                                                let l22 = *ptr0.add(16).cast::<i32>();
                                                let l23 = *ptr0.add(20).cast::<i32>();
                                                let l24 = *ptr0.add(24).cast::<i64>();
                                                let l25 = i32::from(*ptr0.add(32).cast::<u8>());
                                                super::super::super::golem::stt::types::QuotaInfo {
                                                    used: l22 as u32,
                                                    limit: l23 as u32,
                                                    reset_time: l24 as u64,
                                                    unit: super::super::super::golem::stt::types::QuotaUnit::_lift(
                                                        l25 as u8,
                                                    ),
                                                }
                                            };
                                            V39::QuotaExceeded(e39)
                                        }
                                        7 => {
                                            let e39 = {
                                                let l26 = *ptr0.add(16).cast::<i32>();
                                                l26 as u32
                                            };
                                            V39::RateLimited(e39)
                                        }
                                        8 => V39::InsufficientCredits,
                                        9 => {
                                            let e39 = {
                                                let l27 = *ptr0.add(16).cast::<*mut u8>();
                                                let l28 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                _rt::string_lift(bytes29)
                                            };
                                            V39::UnsupportedOperation(e39)
                                        }
                                        10 => {
                                            let e39 = {
                                                let l30 = *ptr0.add(16).cast::<*mut u8>();
                                                let l31 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len32 = l31;
                                                let bytes32 = _rt::Vec::from_raw_parts(
                                                    l30.cast(),
                                                    len32,
                                                    len32,
                                                );
                                                _rt::string_lift(bytes32)
                                            };
                                            V39::ServiceUnavailable(e39)
                                        }
                                        11 => {
                                            let e39 = {
                                                let l33 = *ptr0.add(16).cast::<*mut u8>();
                                                let l34 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V39::NetworkError(e39)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e39 = {
                                                let l36 = *ptr0.add(16).cast::<*mut u8>();
                                                let l37 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            V39::InternalError(e39)
                                        }
                                    };
                                    v39
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result40
                    }
                }
            }
            impl TranscriptionStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn receive_alternative(
                    &self,
                ) -> Result<Option<TranscriptAlternative>, SttError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 24 + 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 24
                                + 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:stt/transcription@1.0.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]transcription-stream.receive-alternative"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result59 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    match l3 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l4 = *ptr0
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l5 = *ptr0
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                let l7 = *ptr0
                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<f32>();
                                                let l8 = *ptr0
                                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l9 = *ptr0
                                                    .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base21 = l8;
                                                let len21 = l9;
                                                let mut result21 = _rt::Vec::with_capacity(len21);
                                                for i in 0..len21 {
                                                    let base = base21
                                                        .add(i * (16 + 5 * ::core::mem::size_of::<*const u8>()));
                                                    let e21 = {
                                                        let l10 = *base.add(0).cast::<*mut u8>();
                                                        let l11 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len12 = l11;
                                                        let bytes12 = _rt::Vec::from_raw_parts(
                                                            l10.cast(),
                                                            len12,
                                                            len12,
                                                        );
                                                        let l13 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f32>();
                                                        let l14 = *base
                                                            .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f32>();
                                                        let l15 = i32::from(
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l17 = i32::from(
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        super::super::super::golem::stt::types::WordSegment {
                                                            text: _rt::string_lift(bytes12),
                                                            start_time: l13,
                                                            end_time: l14,
                                                            confidence: match l15 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l16 = *base
                                                                            .add(12 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f32>();
                                                                        l16
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            speaker_id: match l17 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l18 = *base
                                                                            .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l19 = *base
                                                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len20 = l19;
                                                                        let bytes20 = _rt::Vec::from_raw_parts(
                                                                            l18.cast(),
                                                                            len20,
                                                                            len20,
                                                                        );
                                                                        _rt::string_lift(bytes20)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    result21.push(e21);
                                                }
                                                _rt::cabi_dealloc(
                                                    base21,
                                                    len21 * (16 + 5 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                super::super::super::golem::stt::types::TranscriptAlternative {
                                                    text: _rt::string_lift(bytes6),
                                                    confidence: l7,
                                                    words: result21,
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l22 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::stt::types::SttError as V58;
                                    let v58 = match l22 {
                                        0 => {
                                            let e58 = {
                                                let l23 = *ptr0.add(16).cast::<*mut u8>();
                                                let l24 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len25 = l24;
                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                    l23.cast(),
                                                    len25,
                                                    len25,
                                                );
                                                _rt::string_lift(bytes25)
                                            };
                                            V58::InvalidAudio(e58)
                                        }
                                        1 => {
                                            let e58 = {
                                                let l26 = *ptr0.add(16).cast::<*mut u8>();
                                                let l27 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );
                                                _rt::string_lift(bytes28)
                                            };
                                            V58::UnsupportedFormat(e58)
                                        }
                                        2 => {
                                            let e58 = {
                                                let l29 = *ptr0.add(16).cast::<*mut u8>();
                                                let l30 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len31 = l30;
                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                    l29.cast(),
                                                    len31,
                                                    len31,
                                                );
                                                _rt::string_lift(bytes31)
                                            };
                                            V58::UnsupportedLanguage(e58)
                                        }
                                        3 => {
                                            let e58 = {
                                                let l32 = *ptr0.add(16).cast::<*mut u8>();
                                                let l33 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len34 = l33;
                                                let bytes34 = _rt::Vec::from_raw_parts(
                                                    l32.cast(),
                                                    len34,
                                                    len34,
                                                );
                                                _rt::string_lift(bytes34)
                                            };
                                            V58::TranscriptionFailed(e58)
                                        }
                                        4 => {
                                            let e58 = {
                                                let l35 = *ptr0.add(16).cast::<*mut u8>();
                                                let l36 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len37 = l36;
                                                let bytes37 = _rt::Vec::from_raw_parts(
                                                    l35.cast(),
                                                    len37,
                                                    len37,
                                                );
                                                _rt::string_lift(bytes37)
                                            };
                                            V58::Unauthorized(e58)
                                        }
                                        5 => {
                                            let e58 = {
                                                let l38 = *ptr0.add(16).cast::<*mut u8>();
                                                let l39 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len40 = l39;
                                                let bytes40 = _rt::Vec::from_raw_parts(
                                                    l38.cast(),
                                                    len40,
                                                    len40,
                                                );
                                                _rt::string_lift(bytes40)
                                            };
                                            V58::AccessDenied(e58)
                                        }
                                        6 => {
                                            let e58 = {
                                                let l41 = *ptr0.add(16).cast::<i32>();
                                                let l42 = *ptr0.add(20).cast::<i32>();
                                                let l43 = *ptr0.add(24).cast::<i64>();
                                                let l44 = i32::from(*ptr0.add(32).cast::<u8>());
                                                super::super::super::golem::stt::types::QuotaInfo {
                                                    used: l41 as u32,
                                                    limit: l42 as u32,
                                                    reset_time: l43 as u64,
                                                    unit: super::super::super::golem::stt::types::QuotaUnit::_lift(
                                                        l44 as u8,
                                                    ),
                                                }
                                            };
                                            V58::QuotaExceeded(e58)
                                        }
                                        7 => {
                                            let e58 = {
                                                let l45 = *ptr0.add(16).cast::<i32>();
                                                l45 as u32
                                            };
                                            V58::RateLimited(e58)
                                        }
                                        8 => V58::InsufficientCredits,
                                        9 => {
                                            let e58 = {
                                                let l46 = *ptr0.add(16).cast::<*mut u8>();
                                                let l47 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V58::UnsupportedOperation(e58)
                                        }
                                        10 => {
                                            let e58 = {
                                                let l49 = *ptr0.add(16).cast::<*mut u8>();
                                                let l50 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            V58::ServiceUnavailable(e58)
                                        }
                                        11 => {
                                            let e58 = {
                                                let l52 = *ptr0.add(16).cast::<*mut u8>();
                                                let l53 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                _rt::string_lift(bytes54)
                                            };
                                            V58::NetworkError(e58)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 12, "invalid enum discriminant");
                                            let e58 = {
                                                let l55 = *ptr0.add(16).cast::<*mut u8>();
                                                let l56 = *ptr0
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            V58::InternalError(e58)
                                        }
                                    };
                                    v58
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result59
                    }
                }
            }
            impl TranscriptionStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn close(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:stt/transcription@1.0.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]transcription-stream.close"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod test {
        pub mod stt_exports {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod test_stt_api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test1_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test1();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test1<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test2_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test2();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test2<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test3_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test3();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test3<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test4_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test4();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test4<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test5_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test5();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test5<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    fn test1() -> _rt::String;
                    fn test2() -> _rt::String;
                    fn test3() -> _rt::String;
                    fn test4() -> _rt::String;
                    fn test5() -> _rt::String;
                }
                #[doc(hidden)]
                macro_rules! __export_test_stt_exports_test_stt_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "test:stt-exports/test-stt-api#test1")] unsafe extern "C" fn
                        export_test1() -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_test1_cabi::<$ty > () } } #[unsafe (export_name =
                        "cabi_post_test:stt-exports/test-stt-api#test1")] unsafe extern
                        "C" fn _post_return_test1(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_test1::<$ty > (arg0) } }
                        #[unsafe (export_name = "test:stt-exports/test-stt-api#test2")]
                        unsafe extern "C" fn export_test2() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_test2_cabi::<$ty > () } } #[unsafe
                        (export_name = "cabi_post_test:stt-exports/test-stt-api#test2")]
                        unsafe extern "C" fn _post_return_test2(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_test2::<$ty > (arg0)
                        } } #[unsafe (export_name =
                        "test:stt-exports/test-stt-api#test3")] unsafe extern "C" fn
                        export_test3() -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_test3_cabi::<$ty > () } } #[unsafe (export_name =
                        "cabi_post_test:stt-exports/test-stt-api#test3")] unsafe extern
                        "C" fn _post_return_test3(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_test3::<$ty > (arg0) } }
                        #[unsafe (export_name = "test:stt-exports/test-stt-api#test4")]
                        unsafe extern "C" fn export_test4() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_test4_cabi::<$ty > () } } #[unsafe
                        (export_name = "cabi_post_test:stt-exports/test-stt-api#test4")]
                        unsafe extern "C" fn _post_return_test4(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_test4::<$ty > (arg0)
                        } } #[unsafe (export_name =
                        "test:stt-exports/test-stt-api#test5")] unsafe extern "C" fn
                        export_test5() -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_test5_cabi::<$ty > () } } #[unsafe (export_name =
                        "cabi_post_test:stt-exports/test-stt-api#test5")] unsafe extern
                        "C" fn _post_return_test5(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_test5::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_test_stt_exports_test_stt_api_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::alloc;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_test_stt_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::test::stt_exports::test_stt_api::__export_test_stt_exports_test_stt_api_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::test::stt_exports::test_stt_api);
    };
}
#[doc(inline)]
pub(crate) use __export_test_stt_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:test:stt:test-stt:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2468] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa5\x12\x01A\x02\x01\
A\x10\x01B\x1e\x01m\x03\x07seconds\x08requests\x07credits\x04\0\x0aquota-unit\x03\
\0\0\x01r\x04\x04usedy\x05limity\x0areset-timew\x04unit\x01\x04\0\x0aquota-info\x03\
\0\x02\x01q\x0d\x0dinvalid-audio\x01s\0\x12unsupported-format\x01s\0\x14unsuppor\
ted-language\x01s\0\x14transcription-failed\x01s\0\x0cunauthorized\x01s\0\x0dacc\
ess-denied\x01s\0\x0equota-exceeded\x01\x03\0\x0crate-limited\x01y\0\x14insuffic\
ient-credits\0\0\x15unsupported-operation\x01s\0\x13service-unavailable\x01s\0\x0d\
network-error\x01s\0\x0einternal-error\x01s\0\x04\0\x09stt-error\x03\0\x04\x01s\x04\
\0\x0dlanguage-code\x03\0\x06\x01m\x06\x03wav\x03mp3\x04flac\x03ogg\x03aac\x03pc\
m\x04\0\x0caudio-format\x03\0\x08\x01ky\x01k}\x01r\x03\x06format\x09\x0bsample-r\
ate\x0a\x08channels\x0b\x04\0\x0caudio-config\x03\0\x0c\x01m\x01\x04word\x04\0\x10\
timing-mark-type\x03\0\x0e\x01kv\x01r\x03\x12start-time-secondsv\x10end-time-sec\
onds\x10\x09mark-type\x0f\x04\0\x0btiming-info\x03\0\x11\x01ks\x01r\x05\x04texts\
\x0astart-timev\x08end-timev\x0aconfidence\x10\x0aspeaker-id\x13\x04\0\x0cword-s\
egment\x03\0\x14\x01p\x15\x01r\x03\x04texts\x0aconfidencev\x05words\x16\x04\0\x16\
transcript-alternative\x03\0\x17\x01r\x05\x10duration-secondsv\x10audio-size-byt\
esy\x0arequest-ids\x05model\x13\x08language\x07\x04\0\x16transcription-metadata\x03\
\0\x19\x01p\x18\x01r\x02\x0calternatives\x1b\x08metadata\x1a\x04\0\x14transcript\
ion-result\x03\0\x1c\x03\0\x15golem:stt/types@1.0.0\x05\0\x02\x03\0\0\x0dlanguag\
e-code\x02\x03\0\0\x09stt-error\x01B\x0a\x02\x03\x02\x01\x01\x04\0\x0dlanguage-c\
ode\x03\0\0\x02\x03\x02\x01\x02\x04\0\x09stt-error\x03\0\x02\x01r\x03\x04code\x01\
\x04names\x0bnative-names\x04\0\x0dlanguage-info\x03\0\x04\x01p\x05\x01j\x01\x06\
\x01\x03\x01@\0\0\x07\x04\0\x0elist-languages\x01\x08\x03\0\x19golem:stt/languag\
es@1.0.0\x05\x03\x01B\x10\x02\x03\x02\x01\x02\x04\0\x09stt-error\x03\0\0\x04\0\x0a\
vocabulary\x03\x01\x01h\x02\x01@\x01\x04self\x03\0s\x04\0\x1b[method]vocabulary.\
get-name\x01\x04\x01ps\x01@\x01\x04self\x03\0\x05\x04\0\x1e[method]vocabulary.ge\
t-phrases\x01\x06\x01j\0\x01\x01\x01@\x01\x04self\x03\0\x07\x04\0\x19[method]voc\
abulary.delete\x01\x08\x01i\x02\x01j\x01\x09\x01\x01\x01@\x02\x04names\x07phrase\
s\x05\0\x0a\x04\0\x11create-vocabulary\x01\x0b\x03\0\x1cgolem:stt/vocabularies@1\
.0.0\x05\x04\x02\x03\0\0\x0caudio-config\x02\x03\0\0\x14transcription-result\x02\
\x03\0\0\x16transcript-alternative\x02\x03\0\x02\x0avocabulary\x01B)\x02\x03\x02\
\x01\x05\x04\0\x0caudio-config\x03\0\0\x02\x03\x02\x01\x06\x04\0\x14transcriptio\
n-result\x03\0\x02\x02\x03\x02\x01\x02\x04\0\x09stt-error\x03\0\x04\x02\x03\x02\x01\
\x01\x04\0\x0dlanguage-code\x03\0\x06\x02\x03\x02\x01\x07\x04\0\x16transcript-al\
ternative\x03\0\x08\x02\x03\x02\x01\x08\x04\0\x0avocabulary\x03\0\x0a\x01k\x7f\x01\
k\x07\x01ks\x01ps\x01k\x0f\x01r\x09\x11enable-timestamps\x0c\x1aenable-speaker-d\
iarization\x0c\x08language\x0d\x05model\x0e\x10profanity-filter\x0c\x0fvocabular\
y-name\x0e\x0espeech-context\x10\x16enable-word-confidence\x0c\x14enable-timing-\
detail\x0c\x04\0\x12transcribe-options\x03\0\x11\x04\0\x14transcription-stream\x03\
\x01\x01h\x13\x01p}\x01j\0\x01\x05\x01@\x02\x04self\x14\x05chunk\x15\0\x16\x04\0\
'[method]transcription-stream.send-audio\x01\x17\x01@\x01\x04self\x14\0\x16\x04\0\
#[method]transcription-stream.finish\x01\x18\x01k\x09\x01j\x01\x19\x01\x05\x01@\x01\
\x04self\x14\0\x1a\x04\00[method]transcription-stream.receive-alternative\x01\x1b\
\x01@\x01\x04self\x14\x01\0\x04\0\"[method]transcription-stream.close\x01\x1c\x01\
k\x12\x01j\x01\x03\x01\x05\x01@\x03\x05audio\x15\x06config\x01\x07options\x1d\0\x1e\
\x04\0\x0atranscribe\x01\x1f\x01i\x13\x01j\x01\x20\x01\x05\x01@\x02\x06config\x01\
\x07options\x1d\0!\x04\0\x11transcribe-stream\x01\"\x03\0\x1dgolem:stt/transcrip\
tion@1.0.0\x05\x09\x01B\x06\x01@\0\0s\x04\0\x05test1\x01\0\x04\0\x05test2\x01\0\x04\
\0\x05test3\x01\0\x04\0\x05test4\x01\0\x04\0\x05test5\x01\0\x04\0\x1dtest:stt-ex\
ports/test-stt-api\x05\x0a\x04\0\x11test:stt/test-stt\x04\0\x0b\x0e\x01\0\x08tes\
t-stt\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.\
1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
